//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34014 版自动生成。
// 
#pragma warning disable 1591

namespace YHSD.VocationalEducation.Portal.Notification {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NotificationSoap", Namespace="http://tempuri.org/")]
    public partial class Notification : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertNotificationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Notification() {
            this.Url = "http://61.50.119.70:1070/Notification.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetNotificationCompletedEventHandler GetNotificationCompleted;
        
        /// <remarks/>
        public event InsertNotificationCompletedEventHandler InsertNotificationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotificationEntity[] GetNotification() {
            object[] results = this.Invoke("GetNotification", new object[0]);
            return ((NotificationEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNotificationAsync() {
            this.GetNotificationAsync(null);
        }
        
        /// <remarks/>
        public void GetNotificationAsync(object userState) {
            if ((this.GetNotificationOperationCompleted == null)) {
                this.GetNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotificationOperationCompleted);
            }
            this.InvokeAsync("GetNotification", new object[0], this.GetNotificationOperationCompleted, userState);
        }
        
        private void OnGetNotificationOperationCompleted(object arg) {
            if ((this.GetNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNotificationCompleted(this, new GetNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertNotification(string sendPerson, string recivePerson, string notificationType, string Content) {
            object[] results = this.Invoke("InsertNotification", new object[] {
                        sendPerson,
                        recivePerson,
                        notificationType,
                        Content});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNotificationAsync(string sendPerson, string recivePerson, string notificationType, string Content) {
            this.InsertNotificationAsync(sendPerson, recivePerson, notificationType, Content, null);
        }
        
        /// <remarks/>
        public void InsertNotificationAsync(string sendPerson, string recivePerson, string notificationType, string Content, object userState) {
            if ((this.InsertNotificationOperationCompleted == null)) {
                this.InsertNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNotificationOperationCompleted);
            }
            this.InvokeAsync("InsertNotification", new object[] {
                        sendPerson,
                        recivePerson,
                        notificationType,
                        Content}, this.InsertNotificationOperationCompleted, userState);
        }
        
        private void OnInsertNotificationOperationCompleted(object arg) {
            if ((this.InsertNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNotificationCompleted(this, new InsertNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class NotificationEntity {
        
        private int guidField;
        
        private string notificationTypeField;
        
        private System.DateTime createTimeField;
        
        private string contentField;
        
        private string sendPersonField;
        
        private string recivePersonField;
        
        /// <remarks/>
        public int Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string NotificationType {
            get {
                return this.notificationTypeField;
            }
            set {
                this.notificationTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateTime {
            get {
                return this.createTimeField;
            }
            set {
                this.createTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string SendPerson {
            get {
                return this.sendPersonField;
            }
            set {
                this.sendPersonField = value;
            }
        }
        
        /// <remarks/>
        public string RecivePerson {
            get {
                return this.recivePersonField;
            }
            set {
                this.recivePersonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetNotificationCompletedEventHandler(object sender, GetNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotificationEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotificationEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void InsertNotificationCompletedEventHandler(object sender, InsertNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591