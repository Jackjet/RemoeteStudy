//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34014 版自动生成。
// 
#pragma warning disable 1591

namespace UserCenterSystem.Token {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CertificationServiceSoap", Namespace="http://Certification.org/")]
    public partial class CertificationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GeneratingToken_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratingTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticationToken_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticationTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CertificationService() {
            this.Url = global::UserCenterSystem.Properties.Settings.Default.UserCenterSystem_Token_CertificationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GeneratingToken_NewCompletedEventHandler GeneratingToken_NewCompleted;
        
        /// <remarks/>
        public event GeneratingTokenCompletedEventHandler GeneratingTokenCompleted;
        
        /// <remarks/>
        public event AuthenticationToken_NewCompletedEventHandler AuthenticationToken_NewCompleted;
        
        /// <remarks/>
        public event AuthenticationTokenCompletedEventHandler AuthenticationTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Certification.org/GeneratingToken_New", RequestNamespace="http://Certification.org/", ResponseNamespace="http://Certification.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GeneratingToken_New(string LoginName, string password, string ip) {
            object[] results = this.Invoke("GeneratingToken_New", new object[] {
                        LoginName,
                        password,
                        ip});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratingToken_NewAsync(string LoginName, string password, string ip) {
            this.GeneratingToken_NewAsync(LoginName, password, ip, null);
        }
        
        /// <remarks/>
        public void GeneratingToken_NewAsync(string LoginName, string password, string ip, object userState) {
            if ((this.GeneratingToken_NewOperationCompleted == null)) {
                this.GeneratingToken_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratingToken_NewOperationCompleted);
            }
            this.InvokeAsync("GeneratingToken_New", new object[] {
                        LoginName,
                        password,
                        ip}, this.GeneratingToken_NewOperationCompleted, userState);
        }
        
        private void OnGeneratingToken_NewOperationCompleted(object arg) {
            if ((this.GeneratingToken_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratingToken_NewCompleted(this, new GeneratingToken_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Certification.org/GeneratingToken", RequestNamespace="http://Certification.org/", ResponseNamespace="http://Certification.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GeneratingToken(string LoginName, string password, string UserManager) {
            object[] results = this.Invoke("GeneratingToken", new object[] {
                        LoginName,
                        password,
                        UserManager});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratingTokenAsync(string LoginName, string password, string UserManager) {
            this.GeneratingTokenAsync(LoginName, password, UserManager, null);
        }
        
        /// <remarks/>
        public void GeneratingTokenAsync(string LoginName, string password, string UserManager, object userState) {
            if ((this.GeneratingTokenOperationCompleted == null)) {
                this.GeneratingTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratingTokenOperationCompleted);
            }
            this.InvokeAsync("GeneratingToken", new object[] {
                        LoginName,
                        password,
                        UserManager}, this.GeneratingTokenOperationCompleted, userState);
        }
        
        private void OnGeneratingTokenOperationCompleted(object arg) {
            if ((this.GeneratingTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratingTokenCompleted(this, new GeneratingTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Certification.org/AuthenticationToken_New", RequestNamespace="http://Certification.org/", ResponseNamespace="http://Certification.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AuthenticationToken_New(string Token, string UserManager, string IP) {
            object[] results = this.Invoke("AuthenticationToken_New", new object[] {
                        Token,
                        UserManager,
                        IP});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticationToken_NewAsync(string Token, string UserManager, string IP) {
            this.AuthenticationToken_NewAsync(Token, UserManager, IP, null);
        }
        
        /// <remarks/>
        public void AuthenticationToken_NewAsync(string Token, string UserManager, string IP, object userState) {
            if ((this.AuthenticationToken_NewOperationCompleted == null)) {
                this.AuthenticationToken_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticationToken_NewOperationCompleted);
            }
            this.InvokeAsync("AuthenticationToken_New", new object[] {
                        Token,
                        UserManager,
                        IP}, this.AuthenticationToken_NewOperationCompleted, userState);
        }
        
        private void OnAuthenticationToken_NewOperationCompleted(object arg) {
            if ((this.AuthenticationToken_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticationToken_NewCompleted(this, new AuthenticationToken_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Certification.org/AuthenticationToken", RequestNamespace="http://Certification.org/", ResponseNamespace="http://Certification.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AuthenticationToken(string Token, string UserManager) {
            object[] results = this.Invoke("AuthenticationToken", new object[] {
                        Token,
                        UserManager});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticationTokenAsync(string Token, string UserManager) {
            this.AuthenticationTokenAsync(Token, UserManager, null);
        }
        
        /// <remarks/>
        public void AuthenticationTokenAsync(string Token, string UserManager, object userState) {
            if ((this.AuthenticationTokenOperationCompleted == null)) {
                this.AuthenticationTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticationTokenOperationCompleted);
            }
            this.InvokeAsync("AuthenticationToken", new object[] {
                        Token,
                        UserManager}, this.AuthenticationTokenOperationCompleted, userState);
        }
        
        private void OnAuthenticationTokenOperationCompleted(object arg) {
            if ((this.AuthenticationTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticationTokenCompleted(this, new AuthenticationTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GeneratingToken_NewCompletedEventHandler(object sender, GeneratingToken_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratingToken_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratingToken_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GeneratingTokenCompletedEventHandler(object sender, GeneratingTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratingTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratingTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AuthenticationToken_NewCompletedEventHandler(object sender, AuthenticationToken_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticationToken_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticationToken_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AuthenticationTokenCompletedEventHandler(object sender, AuthenticationTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591